{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\who30\\\\Desktop\\\\Daelim_shop-master\\\\Daelim_shop-master\\\\client\\\\src\\\\CheckBox.js\";\nimport React, { useState } from 'react';\nimport { Collapse, Checkbox } from 'antd';\nimport styled from 'styled-components';\n\nfunction CheckBox(props) {\n  const [Checked, setChecked] = useState([]);\n\n  const handleToggle = value => {\n    //누른 것의 Index를 구하고 \n    const currentIndex = Checked.indexOf(value); //전체 Checked된 State에서  현재 누른 Checkbox가 이미 있다면 \n\n    const newChecked = [...Checked]; // State 넣어준다. \n\n    if (currentIndex === -1) {\n      newChecked.push(value); // 빼주고 \n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n    props.handleFilters(newChecked);\n  };\n\n  const renderCheckboxLists = () => props.list && props.list.map((value, index) => /*#__PURE__*/React.createElement(Div, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    onChange: () => handleToggle(value._id),\n    checked: Checked.indexOf(value._id) === -1 ? false : true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Span, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, value.name))));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, renderCheckboxLists());\n}\n\nconst Span = styled.div`\n\n\n`;\nconst Div = styled.div`\nmargin-right : 20px;\n\n\ndiv> {\nfloat :right;\n}\n`;\nexport default CheckBox;","map":{"version":3,"sources":["C:/Users/who30/Desktop/Daelim_shop-master/Daelim_shop-master/client/src/CheckBox.js"],"names":["React","useState","Collapse","Checkbox","styled","CheckBox","props","Checked","setChecked","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","handleFilters","renderCheckboxLists","list","map","index","_id","name","Span","div","Div"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,MAAnC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAErB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMQ,YAAY,GAAIC,KAAD,IAAW;AAC5B;AACA,UAAMC,YAAY,GAAGJ,OAAO,CAACK,OAAR,CAAgBF,KAAhB,CAArB,CAF4B,CAG5B;;AACA,UAAMG,UAAU,GAAG,CAAC,GAAGN,OAAJ,CAAnB,CAJ4B,CAM5B;;AACA,QAAII,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACrBE,MAAAA,UAAU,CAACC,IAAX,CAAgBJ,KAAhB,EADqB,CAErB;AACH,KAHD,MAGO;AACHG,MAAAA,UAAU,CAACE,MAAX,CAAkBJ,YAAlB,EAAgC,CAAhC;AACH;;AACDH,IAAAA,UAAU,CAACK,UAAD,CAAV;AACAP,IAAAA,KAAK,CAACU,aAAN,CAAoBH,UAApB;AACH,GAfD;;AAmBA,QAAMI,mBAAmB,GAAG,MAAMX,KAAK,CAACY,IAAN,IAAcZ,KAAK,CAACY,IAAN,CAAWC,GAAX,CAAe,CAACT,KAAD,EAAQU,KAAR,kBAC3D,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAE,MAAMX,YAAY,CAACC,KAAK,CAACW,GAAP,CAAtC;AACI,IAAA,OAAO,EAAEd,OAAO,CAACK,OAAR,CAAgBF,KAAK,CAACW,GAAtB,MAA+B,CAAC,CAAhC,GAAoC,KAApC,GAA4C,IADzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAGA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOX,KAAK,CAACY,IAAb,CAHA,CADJ,CAD4C,CAAhD;;AAUA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGaL,mBAAmB,EAHhC,CADJ;AAUH;;AACD,MAAMM,IAAI,GAAGnB,MAAM,CAACoB,GAAK;;;CAAzB;AAKA,MAAMC,GAAG,GAAGrB,MAAM,CAACoB,GAAK;;;;;;;CAAxB;AAUA,eAAenB,QAAf","sourcesContent":["import React, { useState } from 'react'\nimport { Collapse, Checkbox } from 'antd';\nimport styled from 'styled-components';\n\nfunction CheckBox(props) {\n\n    const [Checked, setChecked] = useState([])\n\n    const handleToggle = (value) => {\n        //누른 것의 Index를 구하고 \n        const currentIndex = Checked.indexOf(value)\n        //전체 Checked된 State에서  현재 누른 Checkbox가 이미 있다면 \n        const newChecked = [...Checked]\n\n        // State 넣어준다. \n        if (currentIndex === -1) {\n            newChecked.push(value)\n            // 빼주고 \n        } else {\n            newChecked.splice(currentIndex, 1)\n        }\n        setChecked(newChecked)\n        props.handleFilters(newChecked)\n    }\n\n\n\n    const renderCheckboxLists = () => props.list && props.list.map((value, index) => (\n        <Div key={index} >\n            <div>\n            <Checkbox onChange={() => handleToggle(value._id)}\n                checked={Checked.indexOf(value._id) === -1 ? false : true} />\n            <Span>{value.name}</Span>\n            </div>\n        </Div>\n    ))\n\n    return (\n        <div>\n           \n\n                    {renderCheckboxLists()}\n\n            \n        \n        </div>\n    )\n}\nconst Span = styled.div `\n\n\n`\n\nconst Div = styled.div `\nmargin-right : 20px;\n\n\ndiv> {\nfloat :right;\n}\n`\n\n\nexport default CheckBox\n"]},"metadata":{},"sourceType":"module"}